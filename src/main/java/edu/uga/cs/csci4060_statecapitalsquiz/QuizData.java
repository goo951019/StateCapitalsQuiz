package edu.uga.cs.csci4060_statecapitalsquiz;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;

import java.util.ArrayList;
import java.util.List;

public class QuizData {
    public static final String DEBUG_TAG = "Quiz Table";

    private static String strSeparator = ", ";
    private SQLiteDatabase db;
    private SQLiteOpenHelper quizDbHelper;
    private static final String[] allColumns = {
            QuizDBHelper.COL_1,
            QuizDBHelper.COL_2,
            QuizDBHelper.COL_3,
            QuizDBHelper.COL_4,
            QuizDBHelper.COL_5,
            QuizDBHelper.COL_6
    };

    public QuizData(Context context ) {
        this.quizDbHelper = QuizDBHelper.getInstance( context );
    }

    // Open the database
    public void open() {
        db = quizDbHelper.getWritableDatabase();
        Log.d( DEBUG_TAG, "QuizData: db open" );
    }

    // Close the database
    public void close() {
        if( quizDbHelper != null ) {
            quizDbHelper.close();
            Log.d(DEBUG_TAG, "QuizData: db closed");
        }
    }

    // Retrieve all job leads as a List.
    // This is how we restore persistent objects stored as rows in the job leads table in the database.
    // For each retrieved row, we create a new JobLead (Java object) instance and add it to the list.
    public List<Quiz> retrieveAllQuizzes() {
        ArrayList<Quiz> quizzes = new ArrayList<>();
        Cursor cursor = null;

        try {
            // Execute the select query and get the Cursor to iterate over the retrieved rows
            cursor = db.query( QuizDBHelper.TABLE_NAME, allColumns,
                    null, null, null, null, null );
            // collect all job leads into a List
            if( cursor.getCount() > 0 ) {
                while( cursor.moveToNext() ) {
                    long id = cursor.getLong( cursor.getColumnIndex( QuizDBHelper.COL_1 ) );
                    String date = cursor.getString( cursor.getColumnIndex( QuizDBHelper.COL_2 ) );
                    String question = cursor.getString( cursor.getColumnIndex( QuizDBHelper.COL_3 ) );
                    String correct = cursor.getString( cursor.getColumnIndex( QuizDBHelper.COL_4));
                    String answer = cursor.getString( cursor.getColumnIndex( QuizDBHelper.COL_5 ) );
                    int score = cursor.getInt( cursor.getColumnIndex( QuizDBHelper.COL_6 ) );
                    Quiz q = new Quiz(date, convertStringToArray(question),
                                            convertStringToArray(correct),
                                            convertStringToArray(answer),
                                            score);
                    q.setId( id );
                    quizzes.add( q );
                }
            }
            Log.d( DEBUG_TAG, "Number of records from DB: " + cursor.getCount() );
        }
        catch( Exception e ){
            Log.d( DEBUG_TAG, "Exception caught: " + e );
        }
        finally{
            // we should close the cursor
            if (cursor != null) {
                cursor.close();
            }
        }
        return quizzes;
    }

    // Store a new job lead in the database
    public Quiz storeQuiz( Quiz q ) {

        // Prepare the values for all of the necessary columns in the table
        // and set their values to the variables of the JobLead argument.
        // This is how we are providing persistence to a JobLead (Java object) instance
        // by storing it as a new row in the database table representing job leads.
        ContentValues values = new ContentValues();
        values.put(QuizDBHelper.COL_2, q.getDate());
        values.put(QuizDBHelper.COL_3, convertArrayToString(q.getQuestion()));
        values.put(QuizDBHelper.COL_4, convertArrayToString(q.getCorrect()));
        values.put(QuizDBHelper.COL_5, convertArrayToString(q.getAnswer()));
        values.put(QuizDBHelper.COL_6, q.getScore());;

        // Insert the new row into the database table;  the id (primary key) will be
        // automatically generated by the database system
        long result = db.insert( QuizDBHelper.TABLE_NAME, null, values );
        return q;
    }

    public static String convertArrayToString(String[] array){
        String str = "";
        for (int i = 0;i<array.length; i++) {
            str = str+array[i];
            // Do not append comma at the end of last element
            if(i<array.length-1)
                str = str+strSeparator;
        }
        return str;
    }
    public static String[] convertStringToArray(String str){
        String[] arr = str.split(strSeparator);
        return arr;
    }
}
