package edu.uga.cs.csci4060_statecapitalsquiz;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;

import java.util.ArrayList;
import java.util.List;

public class StateData {
    public static final String DEBUG_TAG = "State Table";

    private SQLiteDatabase db;
    private SQLiteOpenHelper stateDbHelper;
    private static final String[] allColumns = {
            StateDBHelper.COL_1,
            StateDBHelper.COL_2,
            StateDBHelper.COL_3,
            StateDBHelper.COL_4,
            StateDBHelper.COL_5,
            StateDBHelper.COL_6,
            StateDBHelper.COL_7,
            StateDBHelper.COL_8
    };

    public StateData(Context context ) {
        this.stateDbHelper = StateDBHelper.getInstance( context );
    }

    // Open the database
    public void open() {
        db = stateDbHelper.getWritableDatabase();
        Log.d( DEBUG_TAG, "StateData: db open" );
    }

    // Close the database
    public void close() {
        if( stateDbHelper != null ) {
            stateDbHelper.close();
            Log.d(DEBUG_TAG, "StateData: db closed");
        }
    }

    // Retrieve all job leads as a List.
    // This is how we restore persistent objects stored as rows in the job leads table in the database.
    // For each retrieved row, we create a new JobLead (Java object) instance and add it to the list.
    public List<State> retrieveAllStates() {
        ArrayList<State> states = new ArrayList<>();
        Cursor cursor = null;

        try {
            // Execute the select query and get the Cursor to iterate over the retrieved rows
            cursor = db.query( StateDBHelper.TABLE_NAME, allColumns,
                    null, null, null, null, null );
            // collect all job leads into a List
            if( cursor.getCount() > 0 ) {
                while( cursor.moveToNext() ) {
                    long id = cursor.getLong( cursor.getColumnIndex( StateDBHelper.COL_1 ) );
                    String state = cursor.getString( cursor.getColumnIndex( StateDBHelper.COL_2 ) );
                    String capital = cursor.getString( cursor.getColumnIndex( StateDBHelper.COL_3 ) );
                    String scity = cursor.getString( cursor.getColumnIndex( StateDBHelper.COL_4) );
                    String tcity = cursor.getString( cursor.getColumnIndex( StateDBHelper.COL_5 ) );
                    int statehood = cursor.getInt( cursor.getColumnIndex( StateDBHelper.COL_6 ) );
                    int since = cursor.getInt( cursor.getColumnIndex( StateDBHelper.COL_7 ) );
                    int sizerank = cursor.getInt( cursor.getColumnIndex( StateDBHelper.COL_8 ) );
                    State s = new State(state, capital, scity, tcity, statehood, since, sizerank );
                    s.setId( id );
                    states.add( s );
                }
            }
            Log.d( DEBUG_TAG, "Number of records from DB: " + cursor.getCount() );
        }
        catch( Exception e ){
            Log.d( DEBUG_TAG, "Exception caught: " + e );
        }
        finally{
            // we should close the cursor
            if (cursor != null) {
                cursor.close();
            }
        }
        return states;
    }

    // Store a new job lead in the database
    public State storeState( State s ) {

        // Prepare the values for all of the necessary columns in the table
        // and set their values to the variables of the JobLead argument.
        // This is how we are providing persistence to a JobLead (Java object) instance
        // by storing it as a new row in the database table representing job leads.
        ContentValues values = new ContentValues();
        values.put(StateDBHelper.COL_2, s.getState());
        values.put(StateDBHelper.COL_3, s.getCapital());
        values.put(StateDBHelper.COL_4, s.getScity());
        values.put(StateDBHelper.COL_5, s.getTcity());
        values.put(StateDBHelper.COL_6, s.getStatehood());
        values.put(StateDBHelper.COL_7, s.getSince());
        values.put(StateDBHelper.COL_8, s.getSizerank());

        // Insert the new row into the database table;  the id (primary key) will be
        // automatically generated by the database system
        long result = db.insert( StateDBHelper.TABLE_NAME, null, values );
        return s;
    }
}
